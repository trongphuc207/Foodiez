package com.example.demo.products;

import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class ProductService {
    private final ProductRepository repo;
    private final Map<Integer, ProductBasicDTO> productBasicInfoCache = new ConcurrentHashMap<>();

    public ProductService(ProductRepository repo) {
        this.repo = repo;
    }

    public ProductBasicDTO getProductBasicInfo(Integer productId) {
        // Try cache first
        ProductBasicDTO cached = productBasicInfoCache.get(productId);
        if (cached != null) {
            return cached;
        }

        // Cache miss - load from DB
        Optional<Product> product = repo.findById(productId);
        if (product.isPresent()) {
            ProductBasicDTO basicInfo = ProductBasicDTO.fromProduct(product.get());
            productBasicInfoCache.put(productId, basicInfo);
            return basicInfo;
        }
        return null;
    }

    public List<Product> getAllProducts() {
        return repo.findAll();
    }
    public List<Product> searchProducts(String keyword) {
        System.out.println("üîç Searching for keyword: '" + keyword + "'");
        
        // Th·ª≠ c·∫£ 2 c√°ch search
        List<Product> results1 = repo.findByNameContainingIgnoreCase(keyword);
        List<Product> results2 = repo.searchProducts(keyword);
        
        System.out.println("üì¶ findByNameContainingIgnoreCase found: " + results1.size() + " products");
        System.out.println("üì¶ searchProducts found: " + results2.size() + " products");
        
        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ method n√†o c√≥ k·∫øt qu·∫£
        return results1.size() > 0 ? results1 : results2;
    }
    
    public List<Product> getProductsByShopId(int shopId) {
        return repo.findByShopId(shopId);
    }
    public Product createProduct(Product product) {
        return repo.save(product);
    }
    
    public Optional<Product> getProductById(int id) {
        return repo.findById(id);
    }
    
    public Product updateProduct(Product product) {
        return repo.save(product);
    }
    
    public String seedData() {
        try {
            // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
            if (repo.count() > 0) {
                return "D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i. C√≥ " + repo.count() + " s·∫£n ph·∫©m.";
            }
            
            // T·∫°o d·ªØ li·ªáu m·∫´u
            Product[] sampleProducts = {
                new Product(1, 1, "Pizza Margherita", "Pizza c·ªï ƒëi·ªÉn v·ªõi c√† chua, mozzarella v√† h√∫ng qu·∫ø", 15.99, true, "https://via.placeholder.com/300x200?text=Pizza+Margherita", "active"),
                new Product(1, 1, "Pizza Pepperoni", "Pizza v·ªõi pepperoni v√† ph√¥ mai", 17.99, true, "https://via.placeholder.com/300x200?text=Pizza+Pepperoni", "active"),
                new Product(2, 2, "Burger Classic", "Burger b√≤ v·ªõi rau xanh v√† c√† chua", 12.99, true, "https://via.placeholder.com/300x200?text=Burger+Classic", "active"),
                new Product(2, 2, "Chicken Burger", "Burger g√† v·ªõi s·ªët ƒë·∫∑c bi·ªát", 14.99, true, "https://via.placeholder.com/300x200?text=Chicken+Burger", "active"),
                new Product(3, 3, "Caesar Salad", "Salad t∆∞∆°i v·ªõi g√† n∆∞·ªõng v√† s·ªët Caesar", 9.99, true, "https://via.placeholder.com/300x200?text=Caesar+Salad", "active"),
                new Product(3, 3, "Fresh Salad", "Salad rau t∆∞∆°i v·ªõi d·∫ßu olive", 7.99, true, "https://via.placeholder.com/300x200?text=Fresh+Salad", "active"),
                new Product(4, 4, "Cappuccino", "C√† ph√™ cappuccino th∆°m ngon", 4.99, true, "https://via.placeholder.com/300x200?text=Cappuccino", "active"),
                new Product(4, 4, "Espresso", "C√† ph√™ espresso ƒë·∫≠m ƒë√†", 3.99, true, "https://via.placeholder.com/300x200?text=Espresso", "active")
            };
            
            for (Product product : sampleProducts) {
                repo.save(product);
            }
            
            return "ƒê√£ t·∫°o " + sampleProducts.length + " s·∫£n ph·∫©m m·∫´u th√†nh c√¥ng!";
        } catch (Exception e) {
            return "L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u: " + e.getMessage();
        }
    }
}
