import React, { useState, useEffect } from 'react';
import { createVoucher, generateVoucherCode, getActiveVouchers } from '../../api/voucher';
import './VoucherManager.css';

const VoucherManager = () => {
  const [vouchers, setVouchers] = useState([]);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Form data
  const [formData, setFormData] = useState({
    code: '',
    discountType: 'percentage',
    discountValue: '',
    minOrderValue: '',
    expiryDate: '',
    maxUses: ''
  });

  useEffect(() => {
    loadVouchers();
  }, []);

  const loadVouchers = async () => {
    try {
      const data = await getActiveVouchers();
      setVouchers(data);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch voucher');
    }
  };

  // T·∫°o m√£ voucher t·ª± ƒë·ªông
  const handleGenerateCode = async () => {
    try {
      const code = await generateVoucherCode();
      setFormData(prev => ({ ...prev, code }));
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫°o m√£ voucher');
    }
  };

  // T·∫°o voucher m·ªõi
  const handleCreateVoucher = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const voucherData = {
        code: formData.code,
        discountType: formData.discountType,
        discountValue: parseFloat(formData.discountValue),
        minOrderValue: parseFloat(formData.minOrderValue) || 0,
        expiryDate: formData.expiryDate,
        maxUses: formData.maxUses ? parseInt(formData.maxUses) : null,
        createdBy: 1 // TODO: L·∫•y t·ª´ authentication context
      };

      await createVoucher(voucherData);
      
      // Reset form
      setFormData({
        code: '',
        discountType: 'percentage',
        discountValue: '',
        minOrderValue: '',
        expiryDate: '',
        maxUses: ''
      });
      
      setShowCreateForm(false);
      loadVouchers(); // Reload danh s√°ch
      
      alert('T·∫°o voucher th√†nh c√¥ng!');
    } catch (err) {
      setError(err.message || 'Kh√¥ng th·ªÉ t·∫°o voucher');
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const formatDiscount = (voucher) => {
    if (voucher.discountType === 'percentage') {
      return `${voucher.discountValue}%`;
    } else {
      return formatCurrency(voucher.discountValue);
    }
  };

  return (
    <div className="voucher-manager">
      <div className="voucher-header">
        <h2>üé´ Qu·∫£n l√Ω Voucher</h2>
        <button 
          className="create-voucher-btn"
          onClick={() => setShowCreateForm(true)}
        >
          + T·∫°o voucher m·ªõi
        </button>
      </div>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      {/* Form t·∫°o voucher */}
      {showCreateForm && (
        <div className="create-voucher-form">
          <h3>T·∫°o voucher m·ªõi</h3>
          <form onSubmit={handleCreateVoucher}>
            <div className="form-group">
              <label>M√£ voucher:</label>
              <div className="code-input-group">
                <input
                  type="text"
                  value={formData.code}
                  onChange={(e) => setFormData(prev => ({ ...prev, code: e.target.value }))}
                  placeholder="Nh·∫≠p m√£ voucher ho·∫∑c t·∫°o t·ª± ƒë·ªông"
                  required
                />
                <button 
                  type="button" 
                  className="generate-code-btn"
                  onClick={handleGenerateCode}
                >
                  T·∫°o m√£
                </button>
              </div>
            </div>

            <div className="form-group">
              <label>Lo·∫°i gi·∫£m gi√°:</label>
              <select
                value={formData.discountType}
                onChange={(e) => setFormData(prev => ({ ...prev, discountType: e.target.value }))}
              >
                <option value="percentage">Ph·∫ßn trƒÉm (%)</option>
                <option value="fixed">S·ªë ti·ªÅn c·ªë ƒë·ªãnh (VND)</option>
              </select>
            </div>

            <div className="form-group">
              <label>Gi√° tr·ªã gi·∫£m gi√°:</label>
              <input
                type="number"
                value={formData.discountValue}
                onChange={(e) => setFormData(prev => ({ ...prev, discountValue: e.target.value }))}
                placeholder={formData.discountType === 'percentage' ? '10' : '10000'}
                min="0"
                step={formData.discountType === 'percentage' ? '1' : '1000'}
                required
              />
            </div>

            <div className="form-group">
              <label>ƒê∆°n h√†ng t·ªëi thi·ªÉu (VND):</label>
              <input
                type="number"
                value={formData.minOrderValue}
                onChange={(e) => setFormData(prev => ({ ...prev, minOrderValue: e.target.value }))}
                placeholder="50000"
                min="0"
                step="1000"
              />
            </div>

            <div className="form-group">
              <label>Ng√†y h·∫øt h·∫°n:</label>
              <input
                type="date"
                value={formData.expiryDate}
                onChange={(e) => setFormData(prev => ({ ...prev, expiryDate: e.target.value }))}
                min={new Date().toISOString().split('T')[0]}
                required
              />
            </div>

            <div className="form-group">
              <label>S·ªë l·∫ßn s·ª≠ d·ª•ng t·ªëi ƒëa (ƒë·ªÉ tr·ªëng = kh√¥ng gi·ªõi h·∫°n):</label>
              <input
                type="number"
                value={formData.maxUses}
                onChange={(e) => setFormData(prev => ({ ...prev, maxUses: e.target.value }))}
                placeholder="100"
                min="1"
              />
            </div>

            <div className="form-actions">
              <button 
                type="button" 
                className="cancel-btn"
                onClick={() => setShowCreateForm(false)}
              >
                H·ªßy
              </button>
              <button 
                type="submit" 
                className="submit-btn"
                disabled={loading}
              >
                {loading ? 'ƒêang t·∫°o...' : 'T·∫°o voucher'}
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Danh s√°ch voucher */}
      <div className="vouchers-list">
        <h3>Danh s√°ch voucher</h3>
        {vouchers.length === 0 ? (
          <p>Ch∆∞a c√≥ voucher n√†o</p>
        ) : (
          <div className="vouchers-grid">
            {vouchers.map((voucher) => (
              <div key={voucher.id} className="voucher-card">
                <div className="voucher-code">
                  <span className="voucher-icon">üé´</span>
                  <strong>{voucher.code}</strong>
                </div>
                <div className="voucher-details">
                  <div className="discount-info">
                    Gi·∫£m: {formatDiscount(voucher)}
                  </div>
                  <div className="condition-info">
                    ƒê∆°n t·ªëi thi·ªÉu: {formatCurrency(voucher.minOrderValue)}
                  </div>
                  <div className="expiry-info">
                    HSD: {new Date(voucher.expiryDate).toLocaleDateString('vi-VN')}
                  </div>
                  <div className="usage-info">
                    ƒê√£ d√πng: {voucher.usedCount} / {voucher.maxUses || '‚àû'}
                  </div>
                </div>
                <div className="voucher-status">
                  {voucher.isActive ? (
                    <span className="status-active">Ho·∫°t ƒë·ªông</span>
                  ) : (
                    <span className="status-inactive">Kh√¥ng ho·∫°t ƒë·ªông</span>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default VoucherManager;
