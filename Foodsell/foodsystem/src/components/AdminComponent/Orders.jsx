import React, { useEffect, useState } from 'react';
import { adminAPI } from '../../api/admin';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadOrders();
  }, []);

  const loadOrders = async () => {
    try {
      setLoading(true);
      const ordersData = await adminAPI.getOrders();
      setOrders(ordersData);
    } catch (err) {
      setError(err.message);
      console.error('L·ªói t·∫£i ƒë∆°n h√†ng:', err);
    } finally {
      setLoading(false);
    }
  };

  const assignOrderToSeller = async (orderId, sellerId) => {
    try {
      await adminAPI.assignOrderToSeller(orderId, sellerId);
      alert(`ƒê√£ ph√¢n ph·ªëi ƒë∆°n h√†ng ${orderId} cho seller ${sellerId}`);
      loadOrders(); // Reload danh s√°ch
    } catch (err) {
      alert(`L·ªói: ${err.message}`);
    }
  };

  const assignOrderToShipper = async (orderId, shipperId) => {
    try {
      await adminAPI.assignOrderToShipper(orderId, shipperId);
      alert(`ƒê√£ ph√¢n ph·ªëi ƒë∆°n h√†ng ${orderId} cho shipper ${shipperId}`);
      loadOrders(); // Reload danh s√°ch
    } catch (err) {
      alert(`L·ªói: ${err.message}`);
    }
  };

  const viewOrderHistory = async (orderId) => {
    try {
      const history = await adminAPI.getOrderHistory(orderId);
      alert(`L·ªãch s·ª≠ ƒë∆°n h√†ng ${orderId}:\n${JSON.stringify(history, null, 2)}`);
    } catch (err) {
      alert(`L·ªói: ${err.message}`);
    }
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: '400px' }}>
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
        <span className="ms-3">ƒêang t·∫£i ƒë∆°n h√†ng...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="alert alert-danger" role="alert">
        <h4 className="alert-heading">L·ªói!</h4>
        <p>{error}</p>
        <hr />
        <button className="btn btn-outline-danger" onClick={loadOrders}>
          Th·ª≠ l·∫°i
        </button>
      </div>
    );
  }

  return (
    <div className="container-fluid">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
        <button className="btn btn-outline-primary" onClick={loadOrders}>
          <i className="fas fa-sync-alt me-2"></i>L√†m m·ªõi
        </button>
      </div>

      {orders.length === 0 ? (
        <div className="alert alert-info" role="alert">
          <h4 className="alert-heading">Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o!</h4>
          <p>Hi·ªán t·∫°i ch∆∞a c√≥ ƒë∆°n h√†ng n√†o trong h·ªá th·ªëng.</p>
          <hr />
          <p className="mb-0">H√£y t·∫°o ƒë∆°n h√†ng m·ªõi ho·∫∑c ki·ªÉm tra l·∫°i sau.</p>
        </div>
      ) : (
        <div className="table-responsive">
          <table className="table table-striped table-hover">
            <thead className="table-dark">
              <tr>
                <th>M√£ ƒë∆°n</th>
                <th>Ng∆∞·ªùi ƒë·∫∑t</th>
                <th>T·ªïng ti·ªÅn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Ng√†y t·∫°o</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {orders.map((order) => (
                <tr key={order.id}>
                  <td>
                    <strong>#{order.id}</strong>
                  </td>
                  <td>{order.customerName || 'N/A'}</td>
                  <td>
                    <span className="text-success fw-bold">
                      {order.total ? order.total.toLocaleString() : 0} ƒë
                    </span>
                  </td>
                  <td>
                    <span className={`badge ${
                      order.status === 'pending' ? 'bg-warning' :
                      order.status === 'confirmed' ? 'bg-info' :
                      order.status === 'shipped' ? 'bg-primary' :
                      order.status === 'delivered' ? 'bg-success' :
                      order.status === 'cancelled' ? 'bg-danger' : 'bg-secondary'
                    }`}>
                      {order.status || 'N/A'}
                    </span>
                  </td>
                  <td>{order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}</td>
                  <td>
                    <div className="btn-group" role="group">
                      <button
                        onClick={() => assignOrderToSeller(order.id, 1)}
                        className="btn btn-primary btn-sm me-1"
                        title="Ph√¢n ph·ªëi cho Seller"
                      >
                        <i className="fas fa-user-tie me-1"></i>Seller
                      </button>
                      <button
                        onClick={() => assignOrderToShipper(order.id, 1)}
                        className="btn btn-success btn-sm me-1"
                        title="Ph√¢n ph·ªëi cho Shipper"
                      >
                        <i className="fas fa-truck me-1"></i>Shipper
                      </button>
                      <button
                        onClick={() => viewOrderHistory(order.id)}
                        className="btn btn-info btn-sm"
                        title="Xem l·ªãch s·ª≠"
                      >
                        <i className="fas fa-history me-1"></i>L·ªãch s·ª≠
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <div className="mt-4">
        <div className="alert alert-light border" role="alert">
          <h5 className="alert-heading">üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h5>
          <ul className="mb-0">
            <li><strong>Seller:</strong> Ph√¢n ph·ªëi ƒë∆°n h√†ng cho ng∆∞·ªùi b√°n</li>
            <li><strong>Shipper:</strong> Ph√¢n ph·ªëi ƒë∆°n h√†ng cho ng∆∞·ªùi giao h√†ng</li>
            <li><strong>L·ªãch s·ª≠:</strong> Xem chi ti·∫øt l·ªãch s·ª≠ ƒë∆°n h√†ng</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
